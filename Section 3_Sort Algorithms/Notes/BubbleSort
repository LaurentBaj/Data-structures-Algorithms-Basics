BUBBLE SORT - Sorting an array

 - In-place algorithm: does not require that we create another array to sort this since we are partitioning this logically in memory

 - Partitions an array from unsorted to sorted

 - If we compare the and index to it's neighbour on the right and look if array[i] is bigger than array[i + 1] and run through the array.
   Doing this once will push the highest value to the top. Where we to repeat this process several times then we would notice that the array
   would be sorted from right to left. Since the values on the right will after each iteration be sorted (since we know from previous loops
   that they are higher than the values on the left) we can then after each iteration ignore on more value from the right

  The implementation requires this loop to be a nested loop and that we use an outer loop. The outer loop counts downwards and we refrain from looping through the
  whole array by ignoring one more value of the array from the right, since we assume that it has previously been sorted.

  Consider array = {9, 8, 7, 6}

  9876 8976 7896
  7869 7689
  6789

    for(int lastUnsortedIndex = intArray.length -1; lastUnsortedIndex > 0; lastUnsortedIndex--) {
                  for (int i = 0; i < lastUnsortedIndex; i++) {
                      if (intArray[i] > intArray[i + 1]) {
                          swap(intArray, i, i + 1);
                      }
                  }
              }


  Notice that the nested loop ignores one more value each time the outer loop is executed. This also means that we don't have
  to loop through the array four times since it would be properly sorted after the third outer loop iteration.
  This is why the condition:
  (int lastUnsortedIndex = intArray.length -1;) we can spot that the array size is subtracted by one.

- O(n^2) QUADRATIC TIME COMPLEXITY: It will take 100 steps to sort 10 items, it will take 1 000 000 steps to sort 1000 items - Degrades quickly





